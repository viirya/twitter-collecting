// Generated by CozyScript 0.1.1
(function() {
  var Buffer, EventEmitter, MongoDatabase, assert, cli, collecting, config, http, options, prompt, properties, twitterstream, _;

  http = require('http');

  Buffer = require('buffer').Buffer;

  EventEmitter = require('events').EventEmitter;

  _ = require('underscore');

  cli = require('cli');

  prompt = require('prompt');

  MongoDatabase = require('./mongo').MongoDatabase;

  twitterstream = require('twitter-stream');

  config = require('./config');

  assert = require('assert');

  options = cli.parse({
    username: ['u', 'Your twitter username', 'string'],
    password: ['p', 'Your twitter password', 'string'],
    track: ['t', 'The keywords to track', 'string', '']
  });

  prompt.start();

  properties = [
    {
      name: 'username',
      validator: /^[a-zA-Z\s\-]+$/,
      warning: 'Name must be only letters, spaces, or dashes',
      empty: false
    }, {
      name: 'password',
      hidden: true
    }, {
      name: 'db_username',
      validator: /^[a-zA-Z\s\-]+$/,
      warning: 'Name must be only letters, spaces, or dashes',
      empty: false
    }, {
      name: 'db_password',
      hidden: true
    }
  ];

  collecting = function(cb) {
    return prompt.get(properties, function(err, result) {
      options.username = result.username;
      options.password = result.password;
      config.mongodb.username = result.db_username;
      config.mongodb.password = result.db_password;
      return cb();
    });
  };

  collecting(function() {
    var min, mongodb, month, twitter_options, update_date, year, _ref,
      _this = this;
    mongodb = new MongoDatabase(config.mongodb);
    mongodb.init();
    twitter_options = {
      screen_name: options.username,
      password: options.password,
      action: 'filter',
      params: {}
    };
    if ((options.track != null) && options.track !== '') {
      twitter_options.params.track = options.track;
    } else {
      twitter_options.params.locations = '-180,-90,180,90';
    }
    update_date = function() {
      var date;
      date = new Date();
      return [date.getFullYear(), date.getMonth() + 1, date.getMinutes()];
    };
    _ref = update_date(), year = _ref[0], month = _ref[1], min = _ref[2];
    return mongodb.operate(function(collection) {
      var begin_streaming, collection_keep, stream;
      twitterstream = require('twitter-stream');
      stream = twitterstream.connect(twitter_options);
      collection_keep = collection;
      begin_streaming = function(stream) {
        stream.on('error', function(err) {
          console.log('error:');
          return console.log(err);
        });
        return stream.on('status', function(tweet) {
          var cur_min, cur_month, cur_year, _ref1, _ref2,
            _this = this;
          try {
            if (tweet.text != null) {
              if (collection_keep != null) {
                collection_keep.insert(tweet, {
                  safe: true
                }, function(err, result) {
                  return assert.equal(null, err);
                });
              }
            } else if (tweet.limit != null) {

            } else {
              console.log('ERROR');
              console.log(tweetText);
              throw 'unknown tweet type';
            }
          } catch (error) {
            console.log(error);
          }
          _ref1 = update_date(), cur_year = _ref1[0], cur_month = _ref1[1], cur_min = _ref1[2];
          if (cur_month !== month) {
            console.log("Create new collection: " + cur_year + "_" + cur_month);
            collection_keep = null;
            mongodb.close();
            _ref2 = [cur_year, cur_month, cur_min], year = _ref2[0], month = _ref2[1], min = _ref2[2];
            return mongodb.operate(function(collection, close_handler) {
              return collection_keep = collection;
            }, "" + config.mongodb.db + "_" + year + "_" + month);
          }
        });
      };
      return begin_streaming(stream);
    }, "" + config.mongodb.db + "_" + year + "_" + month);
  });

}).call(this);
