
http = require('http')
Buffer = require('buffer').Buffer
EventEmitter = require('events').EventEmitter
_ = require('underscore')
cli = require('cli')
prompt = require('prompt')
#mongo = require('mongodb')
MongoDatabase = require('./mongo').MongoDatabase
Geo = require('./geo').Geo
twitterstream = require('twitter-stream')
Stream = require('twitter-stream-oauth')

renew_twitter_client = (params) ->
    new Stream(params)

config = require('./config')
assert = require('assert')


options = cli.parse
  track: ['t', 'The keywords to track', 'string', ''],
  location: ['l', 'Geo-locaton of tweets to collect', 'string'],

decodeLocation = (cb) ->
    if (options.location?)
        console.log("Decoding the geolocation of #{options.location}")
        geo = new Geo
        geo.decode(options.location, (data) =>
            if (data.results[0].geometry?)
                console.log(data.results[0].geometry)
    
                search_bbox =
                    min_lng: data.results[0].geometry.viewport.southwest.lng
                    min_lat: data.results[0].geometry.viewport.southwest.lat
                    max_lng: data.results[0].geometry.viewport.northeast.lng
                    max_lat: data.results[0].geometry.viewport.northeast.lat
    
                search_bbox_string = "#{search_bbox.min_lng},#{search_bbox.min_lat},#{search_bbox.max_lng},#{search_bbox.max_lat}"
    
                console.log("Constructing flickr bbox search argument: #{search_bbox_string}")
                options.bbox = search_bbox_string
                cb()
            else
                console.log("Error in decoding geolocation")
        )
    else
        cb()


prompt.start();
properties = [
        name: 'db_username', 
        validator: /^[a-zA-Z\s\-]+$/,
        warning: 'Name must be only letters, spaces, or dashes',
        empty: false
    ,
        name: 'db_password',
        hidden: true
 
];

collecting = (cb) ->
    (err, result) <- prompt.get(properties, _)
        config.mongodb.username = result.db_username
        config.mongodb.password = result.db_password
        decodeLocation(cb)

() <- collecting!

    mongodb = new MongoDatabase(config.mongodb)
    mongodb.init() 
 
    twitter_options =
        action: 'filter' 
        params: {}
        consumer_key: '',
        consumer_secret: '',
        access_token_key: '',
        access_token_secret: '',
        api: 'filter',
        api_params: {'locations': "-180,-90,180,90"}    
 
    if options.track? and options.track isnt ''
        twitter_options.api_params['track'] = options.track
    else
        if options.bbox?
            twitter_options.api_params['locations'] = options.bbox
        else
            twitter_options.api_params['locations'] = '-180,-90,180,90'

    update_date = () ->

        getDate = () ->
            date = new Date!
            [date.getFullYear!, date.getMonth! + 1, date.getMinutes!, date.getSeconds!]

        [year, month, min, second] = getDate!

        [(cond) ->
            [cur_year, cur_month, cur_min, cur_second] = getDate!
            if (cond?)
                cond([year, month, min, second], [cur_year, cur_month, cur_min, cur_second])
            [year, month, min, second] = [cur_year, cur_month, cur_min, cur_second]
        , () ->
            [year, month, min, second]]

    # initiate date
    [update_date_function, get_date] = update_date!

    [year, month] = get_date!

    location = if options.location? then "_#{options.location}".replace(/\s/g, "_") else ""

    (collection) <~ mongodb.operate(_, "#{config.mongodb.db}#{location}_#{year}_#{month}")

        stream = null
 
        () <- setInterval(_, 10000)
            (old_date, new_date) <- update_date_function!
                if old_date[3] + 10 <= new_date[3]
                    if stream?
                        stream = null
                    begin_streaming!

        begin_streaming = () ->
            stream = renew_twitter_client(twitter_options)
            stream.stream!
            collection_keep = collection
 
            (err) <- stream.on('error', _)
                console.log('error:')
                console.log(err)
            
            (tweet) <- stream.on('data', _)
                #console.log(tweet)
                try
                    if tweet.text?
                        console.log tweet.user.screen_name + ': ' + tweet.text
                        if collection_keep?
                            (err, result) <- collection_keep.insert(tweet, {safe:true}, _)
                                assert.equal(null, err)

                    else if tweet.limit?
                        # console.log tweetText
                    else
                        console.log 'ERROR'
                        console.log tweetText
                        throw 'unknown tweet type'
                catch error
                    console.log(error)


                (old_date, new_date) <- update_date_function!
                    if old_date[1] isnt new_date[1] 
                        [year, month] = new_date
                        console.log("Create new collection: #{year}_#{month}")
                        
                        collection_keep = null
                        mongodb.close!
                        
                        (collection, close_handler) <~ mongodb.operate(_, "#{config.mongodb.db}#{location}_#{year}_#{month}")
                            collection_keep = collection

        begin_streaming! 

 
